
plugins {
  id 'java'
  id 'idea'
  id 'eclipse'
  id 'maven'
  id 'maven-publish'
  id 'signing'
  id "com.jfrog.bintray" version "1.8.4"
  }
  
processResources {
  from('src/test/resources') { include '**/*.json' }
}

group = 'com.frogfront'
version = applicationVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
	archives jar
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "cuzz22000"
            name "chris w"
            email "info@frogfront.com"
        }
    }
    
    scm {
       url scmWebsite
    }
}

bintray {
	user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['WebCrawlerPub']
    override = true
    pkg {
        repo = 'com.frogfront'
        name = 'web-crawler'
        userOrg = 'frog-front'
        licenses = ['Apache-2.0']
        vcsUrl = scmWebsite
    }
}

if (new File(project.getProperty('signing.secretKeyRingFile')).exists()) {
	signing {
	    sign configurations.archives
	}
}

publishing {
    publications {
        WebCrawlerPub(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.frogfront'
            artifactId 'web-crawler'
            version applicationVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Web Crawler Library (Domain BOT)')
                root.appendNode('name', 'cuzz22000')
                root.appendNode('url', scmWebsite)
                root.children().last() + pomConfig
                
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }

            	// create the signed artifacts
	            project.tasks.signArchives.signatureFiles.each {
	                artifact(it) {
	                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
	                    if (matcher.find()) {
	                        classifier = matcher.group(1)
	                    } else {
	                        classifier = null
	                    }
	                    extension = 'jar.asc'
	                }
	            }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username System.getenv('SONATYPE_USER')
                password System.getenv('SONATYPE_PWD')
            }
    	}
    }
}

task writeNewPom {
    doLast {
        pom {
           
        }.writeTo("pom.xml")
    }
}


dependencies {
    compile(
    	[group: 'com.google.guava', name: 'guava', version: '24.0-jre'],
    	[group: 'com.github.crawler-commons', name: 'crawler-commons', version: '1.0'],
    	[group: 'org.jsoup', name: 'jsoup', version: jsoupVersion]
    	)

    testCompile(
    	[group: 'junit', name: 'junit', version: '4.12'],
    	[group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'],
    	[group: 'org.mockito', name: 'mockito-core', version: '2.15.0'],
    	[group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0'],
    	[group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0'],
    	[group: 'org.powermock', name: 'powermock-core', version: '2.0.0'],
      )
}

defaultTasks 'clean', 'build', 'writeNewPom'

